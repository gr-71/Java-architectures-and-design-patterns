1. Провести анализ своего проекта на использование антипаттернов. 
Какие антипаттерны удалось обнаружить? 

2. Продумать методы устранения.

===============================================================================
===============================================================================

A --- Dodgy code (and useless) - хитрый код - в методе update в классе DBSimulator 
Я его просто потом не использовал, а оставил в ряду других методов, на всякий случай. 

Нужно было как-нибудь использовать, если уж написал. 

------------------------------------------------------------------------------------------------------
B --- Multithreaded correctness - многопоточная корректность - класс AdminInfo, метод getAdminInfoInstance 

    public static synchronized AdminInfo getAdminInfoInstance() {
        if (adminInfoInstance == null) {
            synchronized (AdminInfo.class){
                if (adminInfoInstance == null){
                    adminInfoInstance = new AdminInfo();
                }
            }
        }
        return adminInfoInstance;
    }
Здесь двойная проверка при получении инстанса, о необходимости которой в данном случае Вы говорили на одном из занятий... 
-------------------------------------------------------------------------------------------------------
C --- Suspicious calls to generic collection methods - в методах DataMapperService - немного напутано с типами, так как предыдущий код написан до того, как я решил использовать в качестве ДЗ юзеров. Но ранее в применении этого паттерна не было необходимости, использовал по учебной необходимости - показать, что понимаю, как он работает. 
Локально в этой папке все работает, но в реальном проекте (где бы использовался этот паттерн) нужно устранить нестыковки с типами, чтобы потом не пришлось в дальнейшем где-нибудь жестко кастовать или вообще все менять кардинально. 
------------------------------------------------------------------------------------
D --- Абсолютно то же самое касается и класса LimitedAccessProxy. 
-------------------------------------------------------------------------------------------------------------------
E --- Unwritten field - в классах DoubleData, StringData, LimitedAccessProxy имеются неинициализированные поля и все, что их прочтет - вернет дефолтное значение. 
Нужно поля или проинициализировать, или удалить за ненадобностью. В реальном проекте эти поля бы использовались и нужно проинициализировать. 
-----------------------------------------------------------------------------------
F --- Null point difference - класс LimitedAccessProxy - здесь попытка чтения неинициализированного поля. Нужно инициализировать и использовать, встроив в проект. 
---------------------------------------------------------------------------------

ВЫВОДЫ: 
- внимательнее относиться к использованию заявленных методов, 
- не забывать про инициализацию даже там, где этот код пока не используется полностью, 
- для начала хотя бы ставить аннотацию SuppressWarnings над некоторыми методами, где нет всех проверок (имеется ввиду класс LimitedAccessProxy, метод getAdminInfo), 
- использовать лучше БД (MySQL, PostgreSQL, h2 in memory database, ....), в случае симулятора ДБ - внимательнее относиться к методам, лишние не писать, 
- корректнее встраивать в проект изменения, 
- всегда все проверять на антипаттерны!!! 
